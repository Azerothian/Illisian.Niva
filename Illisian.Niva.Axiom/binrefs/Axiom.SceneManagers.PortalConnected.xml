<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Axiom.SceneManagers.PortalConnected</name>
    </assembly>
    <members>
        <member name="F:Axiom.SceneManagers.PortalConnected.PCZoneFactory.factoryTypeName">
            Factory type name
        </member>
        <member name="F:Axiom.SceneManagers.PortalConnected.Portal.mNode">
            SceneNode (if any) this portal is attached to
        </member>
        <member name="F:Axiom.SceneManagers.PortalConnected.Portal.mTargetZone">
            connected Zone
        </member>
        <member name="F:Axiom.SceneManagers.PortalConnected.Portal.mCurrentHomeZone">
            Zone this portal is currently owned by (in)
        </member>
        <member name="F:Axiom.SceneManagers.PortalConnected.Portal.mNewHomeZone">
            zone to transfer this portal to
        </member>
        <member name="F:Axiom.SceneManagers.PortalConnected.Portal.mTargetPortal">
            Matching Portal in the target zone (usually in same world space
        </member>
        <member name="F:Axiom.SceneManagers.PortalConnected.Portal.mCorners">
            Corners of the portal - coordinates are relative to the sceneNode
        </member>
        <member name="F:Axiom.SceneManagers.PortalConnected.Portal.mDirection">
            Direction ("Norm") of the portal -
        </member>
        <member name="F:Axiom.SceneManagers.PortalConnected.Portal.mRadius">
            Radius of the sphere enclosing the portal
        </member>
        <member name="F:Axiom.SceneManagers.PortalConnected.Portal.mDerivedCorners">
            Derived (world coordinates) Corners of the portal
        </member>
        <member name="F:Axiom.SceneManagers.PortalConnected.Portal.mDerivedDirection">
            Derived (world coordinates) direction of the portal
        </member>
        <member name="F:Axiom.SceneManagers.PortalConnected.Portal.mDerivedCP">
            Derived (world coordinates) of portal (center point)
        </member>
        <member name="F:Axiom.SceneManagers.PortalConnected.Portal.mDerivedSphere">
            Sphere of the portal centered on the derived CP
        </member>
        <member name="F:Axiom.SceneManagers.PortalConnected.Portal.mDerivedPlane">
            Derived (world coordinates) Plane of the portal
        </member>
        <member name="F:Axiom.SceneManagers.PortalConnected.Portal.mPrevDerivedCP">
            Previous frame portal cp (in world coordinates)
        </member>
        <member name="F:Axiom.SceneManagers.PortalConnected.Portal.mPrevDerivedPlane">
            Previous frame derived plane
        </member>
        <member name="F:Axiom.SceneManagers.PortalConnected.Portal.mLocalsUpToDate">
            flag indicating whether or not local values are up-to-date
        </member>
        <member name="M:Axiom.SceneManagers.PortalConnected.Portal.getTargetZone">
            Get the Zone the Portal connects to
        </member>
        <member name="M:Axiom.SceneManagers.PortalConnected.Portal.getCurrentHomeZone">
            Get the Zone the Portal is currently "in"
        </member>
        <member name="M:Axiom.SceneManagers.PortalConnected.Portal.getNewHomeZone">
            Get the Zone the Portal should be moved to
        </member>
        <member name="M:Axiom.SceneManagers.PortalConnected.Portal.getTargetPortal">
            Get the connected portal (if any)
        </member>
        <member name="M:Axiom.SceneManagers.PortalConnected.Portal.setCorners(Axiom.Math.Vector3[])">
            Set the local coordinates of all of the portal corners
        </member>
        <member name="P:Axiom.SceneManagers.PortalConnected.Portal.Direction">
            <summary>
                Gets/Sets the direction vector of the portal in local space
            </summary>
        </member>
        <member name="F:Axiom.SceneManagers.PortalConnected.PCZone.mZoneTypeName">
            Zone type name
        </member>
        <member name="M:Axiom.SceneManagers.PortalConnected.PCZone.CreateNodeZoneData(Axiom.SceneManagers.PortalConnected.PCZSceneNode)">
            create zone specific data for a node
        </member>
        <member name="M:Axiom.SceneManagers.PortalConnected.PCZone.CheckNodeAgainstPortals(Axiom.SceneManagers.PortalConnected.PCZSceneNode,Axiom.SceneManagers.PortalConnected.Portal)">
            (recursive) check the given node against all portals in the zone
        </member>
        <member name="M:Axiom.SceneManagers.PortalConnected.PCZone.CheckLightAgainstPortals(Axiom.SceneManagers.PortalConnected.PCZLight,System.UInt64,Axiom.SceneManagers.PortalConnected.PCZFrustum,Axiom.SceneManagers.PortalConnected.Portal)">
            (recursive) check the given light against all portals in the zone
        </member>
        <member name="M:Axiom.SceneManagers.PortalConnected.PCZone.UpdatePortalsSpatially">
            Update the spatial data for the portals in the zone
        </member>
        <member name="M:Axiom.SceneManagers.PortalConnected.PCZone.FindVisibleNodes(Axiom.SceneManagers.PortalConnected.PCZCamera,System.Collections.Generic.List{Axiom.SceneManagers.PortalConnected.PCZSceneNode}@,Axiom.Graphics.RenderQueue,Axiom.Core.VisibleObjectsBoundsInfo,System.Boolean,System.Boolean,System.Boolean)">
            Find and add visible objects to the render queue.
            		@remarks
            		Starts with objects in the zone and proceeds through visible portals
            		This is a recursive call (the main call should be to _findVisibleObjects)
        </member>
        <member name="M:Axiom.SceneManagers.PortalConnected.PCZone.SetOption(System.String,System.Object)">
            Sets the options for the Zone 
        </member>
        <member name="M:Axiom.SceneManagers.PortalConnected.PCZone.NotifyCameraCreated(Axiom.Core.Camera)">
            called when the scene manager creates a camera in order to store the first camera created as the primary
            			one, for determining error metrics and the 'home' terrain page.
        </member>
        <member name="M:Axiom.SceneManagers.PortalConnected.PCZone.ClearNodeLists(Axiom.SceneManagers.PortalConnected.PCZone.NODE_LIST_TYPE)">
            Remove all nodes from the node reference list and clear it
        </member>
        <member name="P:Axiom.SceneManagers.PortalConnected.PCZone.RequiresZoneSpecificNodeData">
            Indicates whether or not this zone requires zone-specific data for
            each scene node
        </member>
        <member name="M:Axiom.SceneManagers.PortalConnected.DefaultZone.SetEnclosureNode(Axiom.SceneManagers.PortalConnected.PCZSceneNode)">
            Set the enclosure node for this Zone
        </member>
        <member name="M:Axiom.SceneManagers.PortalConnected.DefaultZone.AddPortal(Axiom.SceneManagers.PortalConnected.Portal)">
            Indicates whether or not this zone requires zone-specific data for
            each scene node
        </member>
        <member name="M:Axiom.SceneManagers.PortalConnected.DefaultZone.CheckLightAgainstPortals(Axiom.SceneManagers.PortalConnected.PCZLight,System.UInt64,Axiom.SceneManagers.PortalConnected.PCZFrustum,Axiom.SceneManagers.PortalConnected.Portal)">
            (recursive) check the given light against all portals in the zone
            NOTE: This is the default implementation, which doesn't take advantage
                  of any zone-specific optimizations for checking portal visibility
        </member>
        <member name="M:Axiom.SceneManagers.PortalConnected.DefaultZone.UpdatePortalsSpatially">
            Update the spatial data for the portals in the zone
            NOTE: All scenenodes must be up-to-date before calling this routine.
        </member>
        <member name="M:Axiom.SceneManagers.PortalConnected.DefaultZone.UpdatePortalsZoneData">
            Update the zone data for the portals in the zone
            NOTE: All portal spatial data must be up-to-date before calling this routine.
        </member>
        <member name="M:Axiom.SceneManagers.PortalConnected.DefaultZone.NotifyCameraCreated(Axiom.Core.Camera)">
            called when the scene manager creates a camera because
            			some zone managers (like TerrainZone) need the camera info.
        </member>
        <member name="P:Axiom.SceneManagers.PortalConnected.DefaultZone.RequiresZoneSpecificNodeData">
            Indicates whether or not this zone requires zone-specific data for
            each scene node
        </member>
        <member name="T:Axiom.Core.VisibleObjectsBoundsInfo">
            Structure collecting together information about the visible objects
            	that have been discovered in a scene.
        </member>
        <member name="F:Axiom.Core.VisibleObjectsBoundsInfo.aabb">
            The axis-aligned bounds of the visible objects
        </member>
        <member name="F:Axiom.Core.VisibleObjectsBoundsInfo.receiverAabb">
            The axis-aligned bounds of the visible shadow receiver objects
        </member>
        <member name="F:Axiom.Core.VisibleObjectsBoundsInfo.minDistance">
            The closest a visible object is to the camera
        </member>
        <member name="F:Axiom.Core.VisibleObjectsBoundsInfo.maxDistance">
            The farthest a visible objects is from the camera
        </member>
        <member name="F:Axiom.SceneManagers.PortalConnected.PCZLight.affectsVisibleZone">
            flag indicating if any of the zones in the affectedZonesList is
            visible in the current frame
        </member>
        <member name="F:Axiom.SceneManagers.PortalConnected.PCZLight.affectedZonesList">
            List of PCZones which are affected by the light
        </member>
        <member name="M:Axiom.SceneManagers.PortalConnected.PCZLight.ClearAffectedZones">
            Clear the affectedZonesList
        </member>
        <member name="M:Axiom.SceneManagers.PortalConnected.PCZLight.AddZoneToAffectedZonesList(Axiom.SceneManagers.PortalConnected.PCZone)">
            Add a zone to the zones affected list
        </member>
        <member name="M:Axiom.SceneManagers.PortalConnected.PCZLight.AffectsZone(Axiom.SceneManagers.PortalConnected.PCZone)">
            check if a zone is in the list of zones affected by the light 
        </member>
        <member name="M:Axiom.SceneManagers.PortalConnected.PCZAxisAlignedBoxSceneQuery.#ctor(Axiom.Core.SceneManager)">
            <summary>
                Creates a custom PCZ AAB query
            </summary>
            <param name="creator">
                The SceneManager that creates the query.
            </param>
        </member>
        <member name="M:Axiom.SceneManagers.PortalConnected.PCZAxisAlignedBoxSceneQuery.Execute(Axiom.Core.ISceneQueryListener)">
            <summary>
                Finds any entities that intersect the AAB for the query.
            </summary>
            <param name="listener">
                The listener to call when we find the results.
            </param>
        </member>
        <member name="M:Axiom.SceneManagers.PortalConnected.PCZSceneNode.AddToRenderQueue(Axiom.Core.Camera,Axiom.Graphics.RenderQueue,System.Boolean,Axiom.Core.VisibleObjectsBoundsInfo)">
            Adds the attached objects of this PCZSceneNode into the queue. 
        </member>
        <member name="M:Axiom.SceneManagers.PortalConnected.PCZSceneNode.SavePrevPosition">
            Save the node's current position as the previous position
        </member>
        <member name="M:Axiom.SceneManagers.PortalConnected.PCZFrustum.IsObjectVisible(Axiom.SceneManagers.PortalConnected.Portal)">
            <summary>
                IsObjectVisible() function for portals.
            </summary>
            <remarks>
                Everything needs to be updated spatially before this function is
                called including portal corners, frustum planes, etc.
            </remarks>
            <param name="portal">
                The <see cref="T:Axiom.SceneManagers.PortalConnected.Portal"/> to check visibility against.
            </param>
            <returns>
                true if the Portal is visible.
            </returns>
        </member>
        <member name="M:Axiom.SceneManagers.PortalConnected.PCZFrustum.GetVisibility(Axiom.Math.AxisAlignedBox)">
            <summary>
                A 'more detailed' check for visibility of an AAB.
            </summary>
            <remarks>
                This is useful for stuff like Octree leaf culling.
            </remarks>
            <param name="bound">the <see cref="T:Axiom.Math.AxisAlignedBox"/> to check visibility aginst.</param>
            <returns>
                None, Partial, or Full for visibility of the box.
            </returns>
        </member>
        <member name="F:Axiom.SceneManagers.PortalConnected.PCZSceneManager.defaultZone">
            The root PCZone;
        </member>
        <member name="F:Axiom.SceneManagers.PortalConnected.PCZSceneManager.zones">
            The list of all PCZones
        </member>
        <member name="F:Axiom.SceneManagers.PortalConnected.PCZSceneManager.portals">
            Master list of Portals in the world (includes all portals)
        </member>
        <member name="F:Axiom.SceneManagers.PortalConnected.PCZSceneManager.showPortals">
            Portals visibility flag
        </member>
        <member name="F:Axiom.SceneManagers.PortalConnected.PCZSceneManager.frameCount">
            frame counter used in visibility determination
        </member>
        <member name="F:Axiom.SceneManagers.PortalConnected.PCZSceneManager.activeCameraZone">
            The zone of the active camera (for shadow texture casting use);
        </member>
        <member name="M:Axiom.SceneManagers.PortalConnected.PCZSceneManager.EnableSky(System.Boolean)">
            <summary>
            enable/disable sky rendering
            </summary>
            <param name="onoff"></param>
        </member>
        <member name="P:Axiom.SceneManagers.PortalConnected.PCZSceneManager.ShowPortals">
            <summary>
            Sets the portal visibility flag
            </summary>
        </member>
        <member name="M:Axiom.SceneManagers.PortalConnected.PCZCamera.IsObjectVisible(Axiom.SceneManagers.PortalConnected.Portal,Axiom.Core.FrustumPlane@)">
            <summary>
                IsObjectVisible() function for portals.
            </summary>
            <remarks>
                Everything needs to be updated spatially before this function is
                called including portal corners, frustum planes, etc.
            </remarks>
            <param name="portal">
                The <see cref="T:Axiom.SceneManagers.PortalConnected.Portal"/> to check visibility against.
            </param>
            <param name="culledBy">
                The <see cref="T:Axiom.Core.FrustumPlane"/> that the Portal is in.
            </param>
            <returns>
                true if the Portal is visible.
            </returns>
        </member>
        <member name="M:Axiom.SceneManagers.PortalConnected.PCZCamera.GetVisibility(Axiom.Math.AxisAlignedBox)">
            <summary>
                A 'more detailed' check for visibility of an AAB.
            </summary>
            <remarks>
                This is useful for stuff like Octree leaf culling.
            </remarks>
            <param name="bound">the <see cref="T:Axiom.Math.AxisAlignedBox"/> to check visibility aginst.</param>
            <returns>
                None, Partial, or Full for visibility of the box.
            </returns>
        </member>
    </members>
</doc>
